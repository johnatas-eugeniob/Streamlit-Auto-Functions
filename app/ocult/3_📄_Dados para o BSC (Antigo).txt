import streamlit as st
import pandas as pd
import pygsheets
import os 

st.set_page_config(page_title="Dados para o BSC", 
                   page_icon="üìÑ", 
                   layout="wide"                   
                )

with st.sidebar:
    st.write("Passo a Passo:")
    st.write("Selecione uma checkbox referente ao m√™s do curso, eles est√£o separados em Multiplica e Lidera OPS")

# Add CSS styles for the containers (opcional)
st.subheader("Selecione os cursos abaixo:")

credentials = pygsheets.authorize(service_file=os.path.join(os.getcwd(), "cred.json"))

meuArquivoGsheets = "https://docs.google.com/spreadsheets/d/1nl-rJbtfFjfJUEQp43eo9wU14EN-qDBRaMxs03yKmlQ/edit?gid=2096097163#gid=2096097163"
arquivo = credentials.open_by_url(meuArquivoGsheets)
aba = arquivo.worksheet_by_title("Matriz")
data = aba.get_all_values()
df = pd.DataFrame(data)
df = df.iloc[5:, 0:]  # Ajuste para pular as 4 primeiras linhas 

#LIDERA OPS
aba_lidera = arquivo.worksheet_by_title("LIDERA OPS")
data_lidera = aba_lidera.get_all_values()
df_lidera = pd.DataFrame(data_lidera)  
df_lidera = df_lidera.iloc[1:, 0:]

#---------------------------------------------------------------------------------------------------------------

# Container para as opera√ß√µes multiplica
with st.container(border = True):
    st.title("Multiplica OPS:")

    # Definindo as colunas para os bimestres
    trimestre1, trimestre2 = st.columns(2)

    with trimestre1:
        st.subheader("FEVEREIRO")
        option1 = st.checkbox(label="19/02/2024 - Introdu√ß√£o ao Programa: 5s no setor em todas opera√ß√µes Loggi")
        option2 = st.checkbox(label="26/02/2024 - Inclus√£o de pacotes na esteira em XDs Automatizados")

        st.subheader("MAR√áO")
        option3 = st.checkbox(label="04/03/2024 - Devolu√ß√£o de Insumos em todas as opera√ß√µes Loggi")
        option4 = st.checkbox(label="11/03/2024 - Boas pr√°ticas de Manuseio em todas opera√ß√µes Loggi")
        option5 = st.checkbox(label="25/03/2024 - Como movimentar pacotes e sacas de forma correta, em todas opera√ß√µes Loggi")
        
        st.subheader("ABRIL")
        option6 = st.checkbox(label="01/04/2024 - Valida√ß√£o de Entregadores em Ag√™ncias e HUB's")
        option7 = st.checkbox(label="08/04/2024 - Confer√™ncia de pacotes em Postos Avan√ßados")
        option8 = st.checkbox(label="15/04/2024 - Recebimento em todos os XDs - Parte I")
        option9 = st.checkbox(label="22/04/2024 - Loggi F√°cil")
        option10 = st.checkbox(label="29/04/2024 - Triagem - Reversa XD Regional")
    
    with trimestre2:
        st.subheader("MAIO")
        option11 = st.checkbox(label="06/05/2024 - Recebimento em todas Ag√™ncias e HUBs - Parte I")
        option12 = st.checkbox(label="13/05/2024 - Inclus√£o de pacotes em sacas")
        option13 = st.checkbox(label="20/05/2024 - Amarra√ß√£o de pallets e gaylords com stretch")
        option14 = st.checkbox(label="27/05/2024 - Amarra√ß√£o de carga no ve√≠culo 2.0")   
        
        st.subheader("JUNHO")
        option15 = st.checkbox(label="03/06/2024 - Recupera√ß√£o de pacotes")
        option16 = st.checkbox(label="10/06/2024 - Processamento em Gaiolas Roll Containers")

    # Lista para armazenar as chaves selecionadas no container multiplica
    selected_keys_multiplica = []

    if option1:
        selected_keys_multiplica.append(16)
    if option2:
        selected_keys_multiplica.append(18)
    if option3:
        selected_keys_multiplica.append(20)
    if option4:
        selected_keys_multiplica.append(22)
    if option5:
        selected_keys_multiplica.append(24)
    if option6:
        selected_keys_multiplica.append(26)
    if option7:
        selected_keys_multiplica.append(28)
    if option8:
        selected_keys_multiplica.append(30)
    if option9:
        selected_keys_multiplica.append(32)
    if option10:
        selected_keys_multiplica.append(34)
    if option11:
        selected_keys_multiplica.append(36)
    if option12:
        selected_keys_multiplica.append(38)
    if option13:
        selected_keys_multiplica.append(40)
    if option14:
        selected_keys_multiplica.append(42)
    if option15:
        selected_keys_multiplica.append(44)
    if option16:
        selected_keys_multiplica.append(46)

#----------------------------------------------------------------------------------------------------------

# Container para as opera√ß√µes lidera
with st.container(border = True):
    st.title("Lidera OPS:")

    # Definindo as colunas para os bimestres
    bimestreLidera1, bimestreLidera2, bimestreLidera3, bimestreLidera4  = st.columns(4)

    with bimestreLidera1:
        st.subheader("ABRIL")
        option17 = st.checkbox(label="01/04/2024 - Novo Lex")
        option18 = st.checkbox(label="15/04/2024 - Produtividade")

        # Lista para armazenar as chaves selecionadas no container lidera
        selected_keys_lidera = []

        if option17:
            selected_keys_lidera.append(5)
        if option18:
            selected_keys_lidera.append(7)

    with bimestreLidera2:
        st.subheader("MAIO")
        option19 = st.checkbox(label = "07/05/2024 - Radar Novo Produto")

        if option19:
            selected_keys_lidera.append(9)

    with bimestreLidera3:
        st.subheader("JUNHO")  # Adicione conte√∫do conforme necess√°rio
        option20 = st.checkbox(label = "04/06/2024 - Loggi Ponto - II")

        if option20:
            selected_keys_lidera.append(11)

    with bimestreLidera4:
        st.subheader("JULHO")  # Adicione conte√∫do conforme necess√°rio
        option21 = st.checkbox(label = "02/07/2024 - Loggi Ponto- Nova Fase")

        if option21:
            selected_keys_lidera.append(13)

chaves_multiplica, chaves_lidera, chaves_reserva = st.columns(3)
# Exibindo as chaves selecionadas
with chaves_multiplica:
    st.write("Chaves selecionadas no container **Multiplica**:", str(selected_keys_multiplica))
with chaves_lidera:
    st.write("Chaves selecionadas no container **Lidera**:", str(selected_keys_lidera))
with chaves_reserva:
    st.write("")

#-------------------------------------------------------------------------------------------------------------------------------

uns_contados = {}
total_multiplica = {}
lider_uns_contados = {}
total_lider = {}

button_execute = st.button("Gerar Planilha")
if button_execute:
    # Iterar sobre as linhas na primeira planilha
    for i in range(len(df)):
        base = df.iloc[i, 7]  # Base na coluna H (√≠ndice 0)
        
        if df.iloc[i, 49] != "Sim":  # Coluna "AV" √© o √≠ndice 40
            # Inicializar contadores para a base atual
            total_contados = 0
            uns_para_contar = 0
            
            # Iterar sobre todas as colunas
            for j in range(len(df.iloc[i])):
                value = df.iloc[i, j]
                if j in selected_keys_multiplica and (value == "0" or value == "1"):
                    total_contados += 1
                    if value == "1":
                        uns_para_contar += 1
            
            # Armazenar contagem de 1s para a base atual
            if base in uns_contados:
                uns_contados[base] += uns_para_contar
            else:
                uns_contados[base] = uns_para_contar
            
            # Se a base j√° foi contabilizada, adicionar ao total existente
            if base in total_multiplica:
                total_multiplica[base] += total_contados
            else:
                total_multiplica[base] = total_contados

#---------------------------------------------------------------------------------------------------------------
    
    #LIDERA OPS
    for k in range(len(df_lidera)):
        base_lidera = df_lidera.iloc[k, 4]  # Base na coluna H (√≠ndice 0)
        
        # Inicializar contadores para a base atual
        total_contados_lidera = 0
        uns_para_contar_lidera = 0
            
        # Iterar sobre todas as colunas
        for l in range(len(df_lidera.iloc[k])):
            value_lidera = df_lidera.iloc[k, l]
            if l in selected_keys_lidera and (value_lidera == "0" or value_lidera == "1"):
                total_contados_lidera += 1
                if value_lidera == "1":
                    uns_para_contar_lidera += 1
        
        # Armazenar contagem de 1s para a base atual
        if base_lidera in lider_uns_contados:
            lider_uns_contados[base_lidera] += uns_para_contar_lidera
        else:
            lider_uns_contados[base_lidera] = uns_para_contar_lidera
        
        # Se a base j√° foi contabilizada, adicionar ao total existente
        if base_lidera in total_lider:
            total_lider[base_lidera] += total_contados_lidera
        else:
            total_lider[base_lidera] = total_contados_lidera
    
    #Colunas de exibi√ß√£o
    exibir_dados = st.columns(2, vertical_alignment ="center")

    # Combinar os resultados dos dois DataFrames em um √∫nico DataFrame
    combined_results = pd.DataFrame({
        "Base": list(set(list(uns_contados.keys()) + list(lider_uns_contados.keys()))),
        "Planejado - Multiplicadores": [total_multiplica.get(base, 0) for base in list(set(list(uns_contados.keys()) + list(lider_uns_contados.keys())))],
        "Planejado - L√≠deres": [total_lider.get(base, 0) for base in list(set(list(uns_contados.keys()) + list(lider_uns_contados.keys())))],
        "Realizado - Multiplicadores": [uns_contados.get(base, 0) for base in list(set(list(uns_contados.keys()) + list(lider_uns_contados.keys())))],
        "Realizado - L√≠deres": [lider_uns_contados.get(base, 0) for base in list(set(list(uns_contados.keys()) + list(lider_uns_contados.keys())))]
    })

    # Exibir resultados no Streamlit como tabela multiplica
    
    st.subheader("Resultado da Presen√ßa aos cursos escolhidos:")
    st.dataframe(combined_results, width = 1400)
